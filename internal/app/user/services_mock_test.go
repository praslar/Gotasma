// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package user_test is a generated GoMock package.
package user_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "github.com/gotasma/internal/app/types"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRepository) Create(arg0 context.Context, arg1 *types.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// FindByEmail mocks base method
func (m *MockRepository) FindByEmail(ctx context.Context, email string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *MockRepositoryMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockRepository)(nil).FindByEmail), ctx, email)
}

// FindAllDev mocks base method
func (m *MockRepository) FindAllDev(ctx context.Context, createrID string) ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllDev", ctx, createrID)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllDev indicates an expected call of FindAllDev
func (mr *MockRepositoryMockRecorder) FindAllDev(ctx, createrID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllDev", reflect.TypeOf((*MockRepository)(nil).FindAllDev), ctx, createrID)
}

// FindDevsByID mocks base method
func (m *MockRepository) FindDevsByID(ctx context.Context, userIDs []string) ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDevsByID", ctx, userIDs)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDevsByID indicates an expected call of FindDevsByID
func (mr *MockRepositoryMockRecorder) FindDevsByID(ctx, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDevsByID", reflect.TypeOf((*MockRepository)(nil).FindDevsByID), ctx, userIDs)
}

// Delete mocks base method
func (m *MockRepository) Delete(cxt context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", cxt, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(cxt, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), cxt, id)
}

// FindByID mocks base method
func (m *MockRepository) FindByID(ctx context.Context, UserID string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, UserID)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockRepositoryMockRecorder) FindByID(ctx, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepository)(nil).FindByID), ctx, UserID)
}

// UpdateUserProjectsID mocks base method
func (m *MockRepository) UpdateUserProjectsID(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProjectsID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProjectsID indicates an expected call of UpdateUserProjectsID
func (mr *MockRepositoryMockRecorder) UpdateUserProjectsID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProjectsID", reflect.TypeOf((*MockRepository)(nil).UpdateUserProjectsID), arg0, arg1, arg2, arg3)
}

// MockPolicyService is a mock of PolicyService interface
type MockPolicyService struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyServiceMockRecorder
}

// MockPolicyServiceMockRecorder is the mock recorder for MockPolicyService
type MockPolicyServiceMockRecorder struct {
	mock *MockPolicyService
}

// NewMockPolicyService creates a new mock instance
func NewMockPolicyService(ctrl *gomock.Controller) *MockPolicyService {
	mock := &MockPolicyService{ctrl: ctrl}
	mock.recorder = &MockPolicyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPolicyService) EXPECT() *MockPolicyServiceMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockPolicyService) Validate(ctx context.Context, obj, act string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, obj, act)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockPolicyServiceMockRecorder) Validate(ctx, obj, act interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPolicyService)(nil).Validate), ctx, obj, act)
}
